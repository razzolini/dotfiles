#!/usr/bin/env bash
set -euo pipefail


die() {
    echo "$1"
    exit 1
}

print_blank_line=0
acknowledge() {
    read -rp "$1. Type '$2' to acknowledge: "
    if [[ "$REPLY" != "$2" ]]; then
        die 'Incorrect acknowledgement'
    fi
    print_blank_line=1
}

echo_and_run() {
    echo "> $*"
    "$@"
}


if [[ $# -ne 1 ]]; then
    die 'Invalid arguments - expected a single branch name'
fi
branch="$1"

if ! local_branch_hash="$(git rev-parse --verify --quiet "refs/heads/$branch")"; then
    die "Branch '$branch' not found"
fi

if current_branch="$(git symbolic-ref --quiet --short HEAD)" && [[ "$current_branch" == "$branch" ]]; then
    die "Branch '$branch' is currently checked out"
fi

has_remote=0
if remote_branch_ref="$(git rev-parse --verify --quiet \
    --symbolic-full-name --abbrev-ref --end-of-options "$branch@{u}")"
then
    has_remote=1
    remote="${remote_branch_ref%%/*}"
    remote_branch="${remote_branch_ref#*/}"
fi

if [[ $has_remote -eq 1 ]]; then
    remote_branch_hash="$(git ls-remote -- "$remote" "$remote_branch" | cut --fields 1)"
    if [[ "$remote_branch_hash" != "$local_branch_hash" ]]; then
        die "Branch '$branch' is not up to date with '$remote_branch_ref'"
    fi
fi

branch_committer_email="$(git show --no-patch --format='%ce' "refs/heads/$branch")"
current_user_email="$(git config user.email)"
if [[ "$branch_committer_email" != "$current_user_email" ]]; then
    branch_committer_name="$(git show --no-patch --format='%cn' "refs/heads/$branch")"
    branch_committer_email_local_part="$(git show --no-patch --format='%cl' "refs/heads/$branch")"
    acknowledge \
        "Last committer on branch '$branch' is '$branch_committer_name <$branch_committer_email>'" \
        "$branch_committer_email_local_part"
fi

force=0
if ! git merge-base --is-ancestor "refs/heads/$branch" HEAD; then
    acknowledge "Branch '$branch' is not fully merged into HEAD" 'force'
    force=1
fi

if [[ $has_remote -eq 1 ]]; then
    acknowledge "Also deleting '$remote_branch_ref'" "$remote"
fi

if [[ $print_blank_line -eq 1 ]]; then
    echo
fi

if [[ $has_remote -eq 1 ]]; then
    echo_and_run git push --delete -- "$remote" "$remote_branch"
fi
if [[ $force -eq 1 ]]; then
    echo_and_run git branch --delete --force -- "$branch"
else
    echo_and_run git branch --delete -- "$branch"
fi
