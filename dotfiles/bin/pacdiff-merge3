#!/usr/bin/env bash
set -eu -o pipefail

# Arguments: new_file cur_file
newfile="$1"
curfile="$2"

trap 'rm -f $prevfile ' EXIT
prevfile="$(mktemp -q -p "${TMPDIR:-/tmp}" "$(basename "${curfile:-$0}").XXXXXXXX")"

find_package_file() {
    find /var/cache/pacman/pkg/ -maxdepth 1 \
        -name '*.pkg.tar*.sig' -prune \
        -o \( -name "$1.pkg.tar*" -print -quit \)
}

if [[ "${newfile##*.}" == "pacnew" ]]; then
  printf -- '--> Getting old version of %s\n' "$curfile"
  pkgname="$(pacman -Qqo "$curfile")"
  printf '  > provided by %s package\n' "$pkgname"

  # Get the from/to versions of the latest upgrade
  IFS=" " read -r -a versions <<< "$(awk '/upgraded '"$pkgname"' / {split($0,a,"[()]"); split(a[2],b)} END {printf "%s %s", b[1], b[3]}' /var/log/pacman.log)"

  # Determine package architecture
  if test -n "$(find_package_file "$pkgname-${versions[1]}-any")"; then
      arch='any'
  else
      arch=${HOSTTYPE:-x86_64}
  fi

  # The cached 'from' package
  prev_version_name="$pkgname-${versions[0]}"
  cached="$(find_package_file "$prev_version_name-$arch")"
  if test -z "$cached"; then
      echo "Previous package version is not in cache: $prev_version_name" >&2
      exit 1
  fi

  # Get 'from' version of the file
  tar --extract --to-stdout --auto-compress --file "$cached" "${curfile:1}" >| "$prevfile"

  kdiff3 "$prevfile" "$curfile" "$newfile" --out "$newfile" 2>/dev/null
else
  kdiff3 "$curfile" "$newfile" --out "$newfile" 2>/dev/null
fi
