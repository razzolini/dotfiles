#!/usr/bin/env sh

# Set up named pipe for logging
readonly LOG_PIPE_PATH=/tmp/xsession-errors-pipe
mkfifo "$LOG_PIPE_PATH" || exit 1
exec 3<>"$LOG_PIPE_PATH"
rm "$LOG_PIPE_PATH"

readonly LOG_FILE_PATH=~/.xsession-errors
# Rename old log file if it exists
[ -f "$LOG_FILE_PATH" ] && mv "$LOG_FILE_PATH" "$LOG_FILE_PATH.old"

# Redirect stdout/err from virtual console to log file and add timestamps
exec 1>&3 2>&1
while IFS= read -r line; do
    printf '[%s] %s\n' "$(date +'%Y-%m-%d %H:%M:%S')" "$line"
done <&3 > "$LOG_FILE_PATH" &

# Merge .Xresources
[ -f ~/.Xresources ] && xrdb -merge -I"$HOME" ~/.Xresources

# Set keyboard layout and custom key mappings
configure-keyboard

# Set default cursor to left pointer instead of cross
xsetroot -cursor_name left_ptr
{%@@ if profile == "laptop" @@%}
# Hide mouse cursor when inactive (unclutter-xfixes)
unclutter --fork
{%@@ endif @@%}

{%@@ if profile == "home-desktop" @@%}
# Set HDMI-1 screen to primary
xrandr --output HDMI-1 --primary
{%@@ endif @@%}

# Source system-level X initialization scripts
if [ -d /etc/X11/xinit/xinitrc.d ]; then
    for f in /etc/X11/xinit/xinitrc.d/?*.sh; do
        [ -x "$f" ] && . "$f"
    done
    unset f
fi

# Activate numlock
numlockx &

# Start background programs
xss-lock --transfer-sleep-lock -- i3lock --nofork &
trayer --edge top --align right --SetDockType true --SetPartialStrut true \
       --expand true --width 3 --transparent true --tint 0x000000 --height 16 \
{%@@ if profile == "home-desktop" @@%}
       --monitor primary \
{%@@ endif @@%}
       &
dunst & # Notification server
redshift-gtk &
dropbox &
emacs --fg-daemon &

{%@@ if profile == "home-desktop" @@%}
# Shows desktop notifications from the restic systemd service
restic-notifier &
{%@@ endif @@%}

# Note that running the window manager as a child process instead of using exec
# only works if the WM doesn't fork to background (xmonad doesn't, but other
# WMs might)
xmonad

# Terminate background processes, which would otherwise stay running after logging out
#
# The `jobs` command lists not only running and stopped jobs, but also all jobs
# whose status has changed since it was last reported by the shell. Therefore,
# some of the PIDs returned by `jobs` may correspond to already-terminated
# processes, thus making the kill command produce some annoying error messages,
# such as:
#
#   kill: sending signal to 7899 failed: No such process
#
# The `-r` argument, which limits the output to running jobs, is available in
# bash but not in POSIX sh, so it technically shouldn't be used here, because
# this script is run with plain sh (even though sh is often emulated by bash).
# One solution would be to simply suppress `kill`'s stderr, but this might hide
# some actually important error messages. Instead, `jobs` is invoked twice,
# because, at least with bash, those jobs whose status has changed seem to be
# reported just once by the first invocation (which, due to the lack of the
# `-p` argument, displays job statuses as well as other information). Then, the
# second invocation (done with `-p` to print a list of PIDs) should hopefully
# only return running jobs and stopped jobs (i.e., those jobs that correspond
# to still-existing processes). This is not actually guaranteed to work,
# because some jobs could theoretically end between the two invocations of
# `jobs`, but it should eliminate annoying error messages in most cases without
# ever suppressing any important ones.
jobs > /dev/null
jobs -p | xargs --no-run-if-empty kill
wait
